package ru.lanit.ws.security;

import java.io.*;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import org.apache.commons.codec.binary.Base64;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.oxm.Unmarshaller;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import ru.lanit.ws.pgu.ApplicationHelper;

@ContextConfiguration(locations = { "classpath:test-context.xml" })
@RunWith(SpringJUnit4ClassRunner.class)
public class ApplicationHelperTest {

	@Autowired
	@Qualifier("applicationMarshaller")
	private Unmarshaller unmarshaller;

	@Test
	@Ignore
	public void testApplicationHelper() throws Exception {
		String encoded = "";
		Object result = ApplicationHelper.extractApplication(
				encoded.getBytes(), unmarshaller);
		Assert.assertNotNull(result);
	}

	@Test
	// @Ignore
	public void signFile() throws Exception {
		String srcFileName = "testspace/req_001012314.xml";
		//InputStream is = this.getClass().getClassLoader().getResourceAsStream(srcFileName);
        InputStream is = new FileInputStream(new File(srcFileName));
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		byte[] buffer = new byte[2048];
		int count = -1;
		while ((count = is.read(buffer)) != -1) {
			baos.write(buffer, 0, count);
		}
		;
		byte[] result = baos.toByteArray();
		SecurityServiceImpl ssi = new SecurityServiceImpl();
        ssi.setKeyStorePath("HDImageStore");
        ssi.setAliasName("test_key");
		ssi.setPassword("test");
		List<byte[]> signature = ssi.signByteArray(result);
        byte[] digest = ru.CryptoPro.JCP.Digest.GostDigest.digestData(result);
		ru.CryptoPro.JCP.tools.Array.writeFile(srcFileName + ".hash", Base64.encodeBase64(signature.get(0)));
		ru.CryptoPro.JCP.tools.Array.writeFile(srcFileName + ".sig", signature.get(1));
        ru.CryptoPro.JCP.tools.Array.writeFile(srcFileName + ".digest", Base64.encodeBase64(digest));
//		ru.CryptoPro.JCP.tools.Array.writeFile("attachment.doc.hash", Base64.encodeBase64(signature.get(0)));
//		ru.CryptoPro.JCP.tools.Array.writeFile("attachment.doc.sig", signature.get(1));

		boolean b = ssi.verify(result, signature.get(1));
		Assert.assertTrue(b);
	}


	@Test
	public void verifySignFile() throws Exception {
		InputStream is = this.getClass().getClassLoader().getResourceAsStream("test/attachment.doc");
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		byte[] buffer = new byte[2048];
		int count = -1;
		while ((count = is.read(buffer)) != -1) {
			baos.write(buffer, 0, count);
		}
		;
		InputStream iss = this.getClass().getClassLoader().getResourceAsStream("test/attachment.doc.sig");
		ByteArrayOutputStream baoss = new ByteArrayOutputStream();
		count = -1;
		while ((count = iss.read(buffer)) != -1) {
			baoss.write(buffer, 0, count);
		}
		;
		byte[] result = baos.toByteArray();
		SecurityServiceImpl ssi = new SecurityServiceImpl();
        ssi.setKeyStorePath("HDImageStore");
        ssi.setAliasName("test_key");
		ssi.setPassword("test");
//		ru.CryptoPro.JCP.tools.Array.writeFile("attachment.doc.hash", Base64.encodeBase64(signature.get(0)));
//		ru.CryptoPro.JCP.tools.Array.writeFile("attachment.doc.sig", signature.get(1));

		boolean b = ssi.verify(result, baoss.toByteArray());
		Assert.assertTrue(b);
	}


	@Test
//	 @Ignore
	public void encodeFile() throws Exception {
		InputStream is = this.getClass().getClassLoader()
				.getResourceAsStream("test/req_1.zip");
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		byte[] buffer = new byte[2048];
		int count = -1;
		while ((count = is.read(buffer)) != -1) {
			baos.write(buffer, 0, count);
		}
		;
		byte[] result = Base64.encodeBase64(baos.toByteArray());
		Assert.assertNotNull(result);
		String s = new String(result);
		File f = new File("testspace/encoded.txt");
		FileOutputStream fos = new FileOutputStream(f);
		fos.write(s.getBytes());
		fos.close();
		byte[] r = Base64.decodeBase64(result);
		ZipInputStream zip = new ZipInputStream(new ByteArrayInputStream(r));
		ZipEntry ze = null;
		while ((ze = zip.getNextEntry()) != null) {
			System.out.println(ze.getName());
		}
		;
		System.out.print(zip.available());
	}

}
